---
description: "SOLID/Unix modularity guidance for source files (auto-attached)"
globs:
  - src/pydanticai_api_template/**.py
alwaysApply: false
---
# SOLID & Unix Philosophy: Component Modularity

ðŸ§© **Rule Triggered:** Addition or modification of Python files in `src/`.

**Core Principle:** Design components (classes, functions, modules) that follow the Unix philosophy: "Do one thing and do it well." This aligns with SOLID principles like SRP and Interface Segregation.

**Action Required:**
- When creating or modifying components, consider:
  - **Focus:** Does this component have a single, well-defined purpose?
  - **Composability:** Is it designed to work together well with other components? Are interfaces clear and minimal?
  - **Simplicity:** Is the internal logic straightforward? Can complexity be reduced or abstracted?
- Avoid creating monolithic components that handle too many unrelated tasks.
- Prefer composing smaller, specialized components over building large, complex ones.

**Reference:** Concepts discussed in @docs/ARCHITECTURE.md.

**Decision Point:** If a component's design seems overly broad or complex, suggest potential ways to break it down into more modular parts.
