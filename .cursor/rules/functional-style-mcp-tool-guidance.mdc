---
description: "Functional style guidance for MCP server tools (auto-attached)"
globs:
  - src/minecraft_ai/mcp_server.py
alwaysApply: false
---
# Functional Style: MCP Tool Guidance

ðŸ”Œ **Rule Triggered:** Modification of `mcp_server.py`, potentially adding/changing tools.

**Core Principle:** Write pure functions with no side effects when feasible. Prefer immutability, composition, and observability.

**Action Required when defining `@server.tool()` functions:**
- **Purity:** Aim for pure functions. If side effects (I/O, state changes) are necessary, isolate them and make them explicit.
- **Typing:** Use precise type hints for all parameters and return values. Leverage Pydantic models for complex inputs/outputs.
- **Docstrings:** Write clear docstrings explaining the tool's purpose, parameters, return value, and any potential side effects or exceptions.
- **Observability:** Wrap tool logic with `logfire.span()` or use `logfire.instrument()` for automatic tracing and logging.
- **Error Handling:** Handle potential exceptions gracefully and return informative error messages, possibly using custom exception types.

**Reference:** Functional style concepts in @docs/ARCHITECTURE.md, Observability in @docs/OBSERVABILITY.md.

**Decision Point:** If a tool design requires significant side effects or state management, discuss the trade-offs and design with the user.
