---
description: "Type safety guidance for source files (auto-attached)"
globs:
  - src/pydanticai_api_template/**.py
alwaysApply: false
---
# Type Safety Guidance

ðŸ”’ **Rule Triggered:** Code potentially introducing `Any` type hints.

**Core Principle:** Use strict type annotations and Pydantic models for runtime validation. Avoid `Any` unless absolutely necessary.

**Action Required:**
- Review any usage of `Any`. Can a more specific type be used?
  - Collections: `list[T]`, `dict[K, V]`, `tuple[T1, T2]`, `set[T]`
  - Optional values: `Optional[T]` or `T | None`
  - Multiple types: `Union[T1, T2]` or `T1 | T2`
  - Specific literals: `Literal['a', 'b']`
  - Dictionary shapes: `TypedDict`
  - Pydantic models for structured data.
- Ensure function signatures and Pydantic fields have explicit types.

**Reference:** See @docs/MODELS.md for Pydantic best practices and type examples.

**Decision Point:** Only use `Any` if unavoidable and explain the reasoning clearly.
