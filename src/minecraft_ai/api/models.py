from typing import Any, ClassVar

from pydantic import BaseModel, Field, field_validator


class ChatMessage(BaseModel):
    """Request model for chat messages."""

    message: str = Field(
        ...,
        description="The user's message to the AI agent.",
        min_length=1,
        examples=["Tell me about Pydantic", "How can I use PydanticAI?"],
    )

    @classmethod
    @field_validator("message")
    def message_not_empty(cls, v: str) -> str:
        """Validate that the message is not empty."""
        if not v.strip():
            raise ValueError("Message cannot be empty or consist only of whitespace")
        return v


class ChatResponse(BaseModel):
    """Response model for the AI agent's reply."""

    reply: str = Field(
        ...,
        description="The AI agent's response.",
        examples=["Pydantic is a data validation and settings management library..."],
    )

    model_config: ClassVar[dict[str, Any]] = {
        "json_schema_extra": {
            "example": {"reply": "Pydantic is a Python library for data validation " "and settings management."}
        }
    }


class ErrorResponse(BaseModel):
    """Model for error responses."""

    detail: str = Field(..., description="Error message details")
    status_code: int = Field(..., description="HTTP status code")


class StoryIdea(BaseModel):
    """Model for story ideas generated by the AI."""

    title: str = Field(
        ...,
        description="The title of the story idea.",
        examples=["The Last Colony", "Beyond the Stars"],
    )

    premise: str = Field(
        ...,
        description="A brief description of the story premise.",
        examples=["In a distant future, humanity discovers an alien civilization " "that communicates through dreams."],
    )

    model_config: ClassVar[dict[str, Any]] = {
        "json_schema_extra": {
            "example": {
                "title": "The Last Colony",
                "premise": "On a distant planet, the last human colony fights "
                "for survival against an evolving alien ecosystem that learns "
                "from their technology.",
            }
        }
    }


# --- Chat Endpoint Models ---


class ChatRequest(BaseModel):
    """Model for chat request."""

    message: str = Field(..., description="The user's message to the AI assistant.")

    model_config: ClassVar[dict] = {"json_schema_extra": {"example": {"message": "Tell me about PydanticAI"}}}


class StoryRequest(BaseModel):
    """Model for story generation request."""

    message: str = Field(..., description="The user's prompt for generating a story idea.")

    model_config: ClassVar[dict] = {
        "json_schema_extra": {"example": {"message": "Give me a sci-fi story about space exploration"}}
    }


class StoryResponse(BaseModel):
    """Model for story generation response."""

    title: str = Field(..., description="The title of the generated story idea.")
    premise: str = Field(..., description="The premise of the generated story idea.")

    model_config: ClassVar[dict] = {
        "json_schema_extra": {
            "example": {
                "title": "Quantum Echoes",
                "premise": (
                    "A team of scientists accidentally discovers a parallel universe "
                    "where history took a different turn."
                ),
            }
        }
    }
