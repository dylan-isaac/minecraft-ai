FROM python:3.12-slim

# Set frontend to noninteractive to avoid prompts during apt-get installs
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies, core utilities, Zsh, Git, and modern CLI tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    wget \
    ca-certificates \
    sudo \
    gnupg \
    build-essential \
    zsh \
    ripgrep \
    make \
    # Node.js and npm for promptfoo and repomix
    nodejs \
    npm \
    # Bat (may be named batcat on Debian/Ubuntu)
    bat \
    && \
    # Install Eza (modern ls) - instructions from https://github.com/eza-community/eza/blob/main/INSTALL.md#debian-and-ubuntu
    mkdir -p /etc/apt/keyrings && \
    wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | gpg --dearmor -o /etc/apt/keyrings/gierens.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | tee /etc/apt/sources.list.d/gierens.list && \
    chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list && \
    apt-get update && apt-get install -y --no-install-recommends eza && \
    # Install Oh My Zsh non-interactively
    # Running as root, so install for root user
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh) --unattended" && \
    # Install Oh My Zsh plugins (zsh-autosuggestions, zsh-syntax-highlighting)
    ZSH_CUSTOM="/root/.oh-my-zsh/custom" && \
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM}/plugins/zsh-autosuggestions && \
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting && \
    # Activate plugins in .zshrc (Oh My Zsh default template should source custom plugins)
    # Modify the default Oh My Zsh template's plugin line
    sed -i 's/^plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/' /root/.zshrc && \
    # Install Starship prompt
    curl -sS https://starship.rs/install.sh | sh -s -- --yes && \
    # Install Zoxide (smarter cd)
    curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash && \
    # Set zsh as the default shell for root user (or the user you intend to run as)
    chsh -s $(which zsh) root && \
    # Clean up apt cache
    rm -rf /var/lib/apt/lists/*

# Install promptfoo, repomix, markdownlint-cli, and OpenAI Codex globally using npm
RUN npm install -g promptfoo@0.1.0 repomix markdownlint-cli @openai/codex

# Add user bin directory to PATH (for tools like zoxide installed via script)
ENV PATH="/root/.local/bin:${PATH}"

# Fix bat command name if needed (Debian uses batcat)
RUN if [ -x "/usr/bin/batcat" ]; then ln -s /usr/bin/batcat /usr/local/bin/bat; fi

# Create profile scripts for Starship and Zoxide initialization
RUN mkdir -p /etc/profile.d && \
    echo '# Starship Prompt Initialization\neval "$(starship init zsh)"' > /etc/profile.d/starship.sh && \
    echo '# Zoxide Initialization\neval "$(zoxide init zsh --no-aliases)"' > /etc/profile.d/zoxide.sh && \
    chmod +x /etc/profile.d/starship.sh /etc/profile.d/zoxide.sh

# Create Logfire directory
RUN mkdir -p /root/.logfire

# Create development environment initialization script with useful aliases
RUN echo '# Development environment initialization\n\
# Project-specific aliases\n\
alias start="pat run --reload & pat run-mcp"\n\
alias check="pat check"\n\
alias validate="pat validate"\n\
alias lint="make lint"\n\
alias test="make test"\n\
alias sync="make sync-configs"\n\
alias auth-logfire="logfire auth"\n\
alias use-logfire="logfire projects use pydantic-ai-template"\n\
alias docs="xdg-open http://localhost:8000/docs 2>/dev/null || open http://localhost:8000/docs 2>/dev/null || echo \"Open http://localhost:8000/docs in your browser\""\n\
\n\
# Helper to show available aliases\n\
function help() {\n\
  echo "Available commands:"\n\
  echo "  start        - Start both REST API and MCP servers"\n\
  echo "  check        - Run environment status check"\n\
  echo "  validate     - Validate environment configuration"\n\
  echo "  lint         - Run code quality checks"\n\
  echo "  test         - Run test suite"\n\
  echo "  sync         - Synchronize configuration files"\n\
  echo "  auth-logfire - Authenticate with Logfire"\n\
  echo "  use-logfire  - Set current project to pydantic-ai-template in Logfire"\n\
  echo "  docs         - Open API documentation in browser"\n\
}\n\
' > /etc/profile.d/dev-init.sh && \
    chmod +x /etc/profile.d/dev-init.sh

# Append aliases to .zshrc (Initialization moved to /etc/profile.d)
RUN echo '\n# Modern CLI Aliases\n\
    alias ls="eza --icons --group-directories-first"\
    alias la="eza -a --icons --group-directories-first"\
    alias ll="eza -l --icons --group-directories-first"\
    alias lt="eza --tree --level=2 --icons"\
    alias cat="bat --paging=never --style=plain"\
    alias grep="rg"\
    \n\
    # Source development environment setup\n\
    source /etc/profile.d/starship.sh\n\
    source /etc/profile.d/zoxide.sh\n\
    source /etc/profile.d/dev-init.sh\n\
    \n\
    # Show welcome message on new sessions\n\
    if [ -f /app/scripts/welcome.sh ]; then\n\
      /app/scripts/welcome.sh\n\
    fi\
    ' >> /root/.zshrc

# Set the working directory
WORKDIR /app

# Set up Python environment variables for development
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    ENVIRONMENT=development

# Copy the entire project context first (needed for uv install)
# .dockerignore should exclude unnecessary files
COPY . .

# Install uv globally and then install project dependencies (including dev/test)
# Using --system to install in the main Python environment within the container
# uv should be available on PATH after installation
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    # Ensure uv is available on PATH for the next command
    export PATH="/root/.local/bin:$PATH" && \
    echo "Installing project dependencies using uv..." && \
    uv pip install --system --no-cache "logfire[fastapi,httpx,asyncio,pydantic_ai]" && \
    uv pip install --system --no-cache --editable ".[dev,test]"

# Expose the port the app runs on
EXPOSE 8000

# The rest of the setup happens in docker-compose.yml
# We mount the code as a volume and install the package at runtime

# Default command - overridden by docker-compose.yml
CMD ["zsh", "-c", "echo 'Dev Container ready! Use VS Code tasks or terminal to start the app.'; trap 'echo Container stopping' TERM INT; tail -f /dev/null & wait"]
