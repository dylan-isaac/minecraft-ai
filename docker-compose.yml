name: minecraft-ai

services:
  # Development service with hot reload
  minecraft-ai-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    profiles: ["dev"]
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      # Exclude virtual environment from host mount for performance
      - /app/.venv
      # Mount Git config and credentials from host for seamless Git operations within the container
      - ~/.gitconfig:/root/.gitconfig:ro # Read-only mount
      - ~/.git-credentials:/root/.git-credentials:ro # Read-only mount
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      # Disable Python bytecode generation in development for faster reloads
      - PYTHONDONTWRITEBYTECODE=1
      # Raise exceptions on ByteWarnings (helps catch issues)
      - PYTHONBYTEWARNFLAGS=0
      # Enable traceback for all warnings during development
      - PYTHONWARNINGS=always
      # Pass Git environment variables from host if set
      - GIT_AUTHOR_NAME
      - GIT_AUTHOR_EMAIL
      - GIT_COMMITTER_NAME
      - GIT_COMMITTER_EMAIL
    tty: true # Keep the container running interactively
    stdin_open: true # Keep stdin open for interactive sessions
    healthcheck:
      # Basic health check: verifies the container is healthy without requiring the API to be running
      test: ["CMD", "ps", "aux"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s # Give the service time to start before checking
    # Simple command to keep container running without auto-starting the API
    command: ["tail", "-f", "/dev/null"]

  # Production-like service (without hot reload or dev tools)
  minecraft-ai:
    build:
      context: .
      # Uses the production Dockerfile by default
    profiles: ["prod"]
    ports:
      # Maps host port 8000 to container port 8000
      # Change the host port (e.g., 8001:8000) if 8000 is already in use on your host
      - "8000:8000"
    # Set environment variables directly or use an env_file
    # environment:
    #   - OPENAI_API_KEY=${OPENAI_API_KEY} # Example: Pass API key from host env
    env_file:
      - .env # Load environment variables from .env file if present
    restart: unless-stopped # Restart policy for production-like scenarios
    healthcheck:
      # Same health check as the development service
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    # The production Dockerfile's CMD will be used by default
    # command: pat run --host 0.0.0.0 # Command is defined in Dockerfile
